{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"#mc_embed_signup{background:#fff; clear:left; font:14px Helvetica,Arial,sans-serif; } /* Add your own Mailchimp form style overrides in your site stylesheet or in this style block. We recommend moving this block and the preceding CSS link to the HEAD of your HTML file. */ Elixir Masters \u00b6 Considering Elixir ? Or maybe just curious ? Chances are you already have some experience with programming or if you are a complete beginner, I couldn't be any more happy! Before getting along with actual coding, let's get a couple of things straight, Elixir is not a silver bullet to all your problems, ever heard of Hammer Syndrome ? It implies that, \"If you only have a hammer, then every problem looks like a nail!\" , but in the practical world things are very different, problems are various and in different domains. Then where would you use Elixir? Scenario \u00b6 Let's consider this, the world basically works by communication , communication is required in every aspects of life, products communicate their utility, services communicate their usability, consumer communicate their requirements, etc, and in this world of communication data is constantly being passed from one point to another. Elixir is extremely well suited for these applications, it really shines when data has to be transformed and transferred in a highly concurrent, distributed and fault tolerant manner. Often, data has to be transformed to suit the end users, Elixir with all its eco-system is a perfectly capable system for it. Perhaps, that's why products like WhatsApp (Erlang), Discord & Bleacher Report rely so highly on it. Understanding Elixir \u00b6 Elixir is a functional programming language, the word functional is important as it does not have the concept of Objects or Classes and has immutable data types , if you come from a Object Orientated Language then you need to unlearn a lot of concepts in order to understand the functional paradigm. Programming need not only be object oriented, functional programming is a beautiful way of thinking, also it takes away a lot of pain as you don't need to keep a track of the state of objects. About Erlang/Elixir \u00b6 Erlang/Elixir looks as if it has a cryptic syntax and functional programming makes them look difficult on the surface, but its really not the case, they are really great to work with and specially Elixir is designed to make developers feel happy . We need to give it, other languages did a fantastic job of presenting themself in a much better way, also the amount of marketing, conferences, sponsorships, etc have really shaped them to be much popular and widely used. But being popular does not necessarily mean better , Erlang and Elixir really shines in what they do, perhaps they just need better marketing efforts. What is Erlang, Elixir And Phoenix \u00b6 Erlang/OTP is a concurrent functional programming language that forms the basic foundation, it was developed by Ericsson in 1986 and made open source in 1998. Erlang runs on its virtual machine called as the BEAM . OTP simply stands for Open Telecom Platform . Elixir builds on top of Erlang and provides a nice and easy way of interacting with the underlying system. It provides abstraction over Erlang, so that its easier for developers to code and finally it compiles and runs on BEAM. Phoenix Framework is a great set of tooling to create mature and blazing fast web applications, its based on Elixir and offers excellent framework to create highly scalable and concurrent distributed applications. We would be more focused on Elixir & Phoenix , but keep it mind that finally everything is compiled and runs on the BEAM. Elixir & Phoenix also has very good set of online documentation and the communities are also generally warm and helpful. Let the magic begin! Getting Help \u00b6 Elixir has a set of very nice online documentation and guides . Elixir Forum is an excellent place to post queries and interact with the community. Code Sample \u00b6 All code will be in the form of following block 1 2 3 4 5 6 7 8 # Elixir defmodule Hello do def say do :World end end Get Updates \u00b6 Subscribe Once a week updates about new content and articles, thats it!","title":"Home"},{"location":"#elixir-masters","text":"Considering Elixir ? Or maybe just curious ? Chances are you already have some experience with programming or if you are a complete beginner, I couldn't be any more happy! Before getting along with actual coding, let's get a couple of things straight, Elixir is not a silver bullet to all your problems, ever heard of Hammer Syndrome ? It implies that, \"If you only have a hammer, then every problem looks like a nail!\" , but in the practical world things are very different, problems are various and in different domains. Then where would you use Elixir?","title":"Elixir Masters"},{"location":"#scenario","text":"Let's consider this, the world basically works by communication , communication is required in every aspects of life, products communicate their utility, services communicate their usability, consumer communicate their requirements, etc, and in this world of communication data is constantly being passed from one point to another. Elixir is extremely well suited for these applications, it really shines when data has to be transformed and transferred in a highly concurrent, distributed and fault tolerant manner. Often, data has to be transformed to suit the end users, Elixir with all its eco-system is a perfectly capable system for it. Perhaps, that's why products like WhatsApp (Erlang), Discord & Bleacher Report rely so highly on it.","title":"Scenario"},{"location":"#understanding-elixir","text":"Elixir is a functional programming language, the word functional is important as it does not have the concept of Objects or Classes and has immutable data types , if you come from a Object Orientated Language then you need to unlearn a lot of concepts in order to understand the functional paradigm. Programming need not only be object oriented, functional programming is a beautiful way of thinking, also it takes away a lot of pain as you don't need to keep a track of the state of objects.","title":"Understanding Elixir"},{"location":"#about-erlangelixir","text":"Erlang/Elixir looks as if it has a cryptic syntax and functional programming makes them look difficult on the surface, but its really not the case, they are really great to work with and specially Elixir is designed to make developers feel happy . We need to give it, other languages did a fantastic job of presenting themself in a much better way, also the amount of marketing, conferences, sponsorships, etc have really shaped them to be much popular and widely used. But being popular does not necessarily mean better , Erlang and Elixir really shines in what they do, perhaps they just need better marketing efforts.","title":"About Erlang/Elixir"},{"location":"#what-is-erlang-elixir-and-phoenix","text":"Erlang/OTP is a concurrent functional programming language that forms the basic foundation, it was developed by Ericsson in 1986 and made open source in 1998. Erlang runs on its virtual machine called as the BEAM . OTP simply stands for Open Telecom Platform . Elixir builds on top of Erlang and provides a nice and easy way of interacting with the underlying system. It provides abstraction over Erlang, so that its easier for developers to code and finally it compiles and runs on BEAM. Phoenix Framework is a great set of tooling to create mature and blazing fast web applications, its based on Elixir and offers excellent framework to create highly scalable and concurrent distributed applications. We would be more focused on Elixir & Phoenix , but keep it mind that finally everything is compiled and runs on the BEAM. Elixir & Phoenix also has very good set of online documentation and the communities are also generally warm and helpful. Let the magic begin!","title":"What is Erlang, Elixir And Phoenix"},{"location":"#getting-help","text":"Elixir has a set of very nice online documentation and guides . Elixir Forum is an excellent place to post queries and interact with the community.","title":"Getting Help"},{"location":"#code-sample","text":"All code will be in the form of following block 1 2 3 4 5 6 7 8 # Elixir defmodule Hello do def say do :World end end","title":"Code Sample"},{"location":"#get-updates","text":"Subscribe Once a week updates about new content and articles, thats it!","title":"Get Updates"},{"location":"subscribe/","text":"#mc_embed_signup{background:#fff; clear:left; font:14px Helvetica,Arial,sans-serif; } /* Add your own Mailchimp form style overrides in your site stylesheet or in this style block. We recommend moving this block and the preceding CSS link to the HEAD of your HTML file. */ Subscribe Once a week updates about new content and articles, thats it!","title":"Subscribe"},{"location":"about/about-me/","text":"About \u00b6 Hi, my name is Anil Kulkarni and I am passionate about coding. I am a self learned programmer and enjoy my daily dose of coding. When I am not coding you can usually find me watching movies \ud83c\udfac Background \u00b6 I have done my Mechanical Engineering and then completed Masters In Marketing Management , I was always passionate about creating things, my last venture was making \"Handmade Soaps\" and while making e-commerce website for it, coding bug caught up with me and I have been learning programming ever since. I am still a beginner and try to share whatever I learn. I am open to any new opportunities, you can checkout my profile at - LinkedIn Github You can contact me on - elixirmastersofficial [at] gmail (dot) com Motivation \u00b6 As a beginner I really struggled to find the right sources for learning and ended up taking a lot of free and paid online courses, which finally ended up in confusion and frustration. So I decided to write a simple to understand, beginner oriented resources for learning how to program.","title":"About Me"},{"location":"about/about-me/#about","text":"Hi, my name is Anil Kulkarni and I am passionate about coding. I am a self learned programmer and enjoy my daily dose of coding. When I am not coding you can usually find me watching movies \ud83c\udfac","title":"About"},{"location":"about/about-me/#background","text":"I have done my Mechanical Engineering and then completed Masters In Marketing Management , I was always passionate about creating things, my last venture was making \"Handmade Soaps\" and while making e-commerce website for it, coding bug caught up with me and I have been learning programming ever since. I am still a beginner and try to share whatever I learn. I am open to any new opportunities, you can checkout my profile at - LinkedIn Github You can contact me on - elixirmastersofficial [at] gmail (dot) com","title":"Background"},{"location":"about/about-me/#motivation","text":"As a beginner I really struggled to find the right sources for learning and ended up taking a lot of free and paid online courses, which finally ended up in confusion and frustration. So I decided to write a simple to understand, beginner oriented resources for learning how to program.","title":"Motivation"},{"location":"contact/contact/","text":"Contact \u00b6 Its always nice to hear from the community, please feel free to drop a mail to - elixirmastersofficial [at] gmail (dot) com I normally try to get back immediately or within 12 hrs of receiving the mail. Or You can always socially connect - Youtube Twitter","title":"Connect"},{"location":"contact/contact/#contact","text":"Its always nice to hear from the community, please feel free to drop a mail to - elixirmastersofficial [at] gmail (dot) com I normally try to get back immediately or within 12 hrs of receiving the mail. Or You can always socially connect - Youtube Twitter","title":"Contact"},{"location":"courses/introduction/","text":"","title":"Introduction"},{"location":"tutorials/basics/alias-require-import/","text":"","title":"Alias, Require and Import"},{"location":"tutorials/basics/basic-operations/","text":"Basic Operations \u00b6 TODO \u00b6","title":"Basic Operations"},{"location":"tutorials/basics/basic-operations/#basic-operations","text":"","title":"Basic Operations"},{"location":"tutorials/basics/basic-operations/#todo","text":"","title":"TODO"},{"location":"tutorials/basics/case-cond-if/","text":"","title":"Case, Cond and If"},{"location":"tutorials/basics/comprehensions/","text":"","title":"Comprehensions"},{"location":"tutorials/basics/data-types/","text":"Data Types \u00b6 TODO \u00b6","title":"Data Types"},{"location":"tutorials/basics/data-types/#data-types","text":"","title":"Data Types"},{"location":"tutorials/basics/data-types/#todo","text":"","title":"TODO"},{"location":"tutorials/basics/doctest/","text":"","title":"Doctest"},{"location":"tutorials/basics/erlang-lib/","text":"","title":"Erlang Libraries"},{"location":"tutorials/basics/file-handling/","text":"","title":"File Handling"},{"location":"tutorials/basics/hello_elixir/","text":"Hello Elixir \u00b6 Learn how to make your first Hello World program in Elixir. Using IEx \u00b6 Open your terminal and start IEx - 1 2 $ iex iex ( 1 ) > Write the following into your IEx - 1 iex ( 1 ) > IO.puts ( \"Hello World\" ) Output - 1 2 Hello World :ok Using Script File \u00b6 Create a file hello_world.exs and enter the following - 1 IO . puts ( \"Hello World\" ) Elixir files can be created using two extension exs or ex , exs is normally used for creating scripts and ex for creating compiled files. Here we will be working with script file, later we will explore working with ex extensions for compiled files. To run the script, open the terminal and navigate to the folder that contains the hello_world.exs file and run the following - 1 $ elixir hello_world.exs Output 1 2 $ elixir hello_world.exs \"Hello World\" That's it! You just created your file Elixir program. IO \u00b6 Wondering what is this IO ? It is simply a built-in module provided by Elixir, it is automatically imported and is made available to use, we will cover more about modules later. In addition to IO there are a lot of modules made available, be sure to check out the official documentation for a complete list. puts is simply a function defined in IO module, we invoke the function by passing a argument IO.puts(\"Hello World\") , this in turn prints \"Hello World\" to our terminal. Elixir is pretty flexible about its syntax, you can omit the brackets and it will work just the same - 1 2 3 iex ( 1 ) > IO.puts \"Hello World\" Hello World :ok The choice of using brackets or not is upto you, personally I like using brackets, it makes the code easier to read, but it's just my personal preference. Exercises \u00b6 1) Create and run a script file that will print the following. Make sure to make a new file with exs extension and run it from your terminal. \"Elixir Rocks!!!\" 2) And one more script that will print - \"Hi, my name is Octallium and I am learning Elixir\" 3) What is the result of - 1 iex ( 1 ) > IO.puts 7 + 6 4) And 1 iex ( 1 ) > IO.puts \"7 + 6\" 5) For some fun try running this - 1 iex ( 1 ) > IO.puts \"Hello \" <> \"World\" Don't skip the exercises if you really want to learn Elixir! However simple they may seem, its important to try them out yourself! Please Consider a Donation \u2764\ufe0f \u00b6 If you would like to see articles coming up much faster then please consider a small donation. All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"Hello Elixir"},{"location":"tutorials/basics/hello_elixir/#hello-elixir","text":"Learn how to make your first Hello World program in Elixir.","title":"Hello Elixir"},{"location":"tutorials/basics/hello_elixir/#using-iex","text":"Open your terminal and start IEx - 1 2 $ iex iex ( 1 ) > Write the following into your IEx - 1 iex ( 1 ) > IO.puts ( \"Hello World\" ) Output - 1 2 Hello World :ok","title":"Using IEx"},{"location":"tutorials/basics/hello_elixir/#using-script-file","text":"Create a file hello_world.exs and enter the following - 1 IO . puts ( \"Hello World\" ) Elixir files can be created using two extension exs or ex , exs is normally used for creating scripts and ex for creating compiled files. Here we will be working with script file, later we will explore working with ex extensions for compiled files. To run the script, open the terminal and navigate to the folder that contains the hello_world.exs file and run the following - 1 $ elixir hello_world.exs Output 1 2 $ elixir hello_world.exs \"Hello World\" That's it! You just created your file Elixir program.","title":"Using Script File"},{"location":"tutorials/basics/hello_elixir/#io","text":"Wondering what is this IO ? It is simply a built-in module provided by Elixir, it is automatically imported and is made available to use, we will cover more about modules later. In addition to IO there are a lot of modules made available, be sure to check out the official documentation for a complete list. puts is simply a function defined in IO module, we invoke the function by passing a argument IO.puts(\"Hello World\") , this in turn prints \"Hello World\" to our terminal. Elixir is pretty flexible about its syntax, you can omit the brackets and it will work just the same - 1 2 3 iex ( 1 ) > IO.puts \"Hello World\" Hello World :ok The choice of using brackets or not is upto you, personally I like using brackets, it makes the code easier to read, but it's just my personal preference.","title":"IO"},{"location":"tutorials/basics/hello_elixir/#exercises","text":"1) Create and run a script file that will print the following. Make sure to make a new file with exs extension and run it from your terminal. \"Elixir Rocks!!!\" 2) And one more script that will print - \"Hi, my name is Octallium and I am learning Elixir\" 3) What is the result of - 1 iex ( 1 ) > IO.puts 7 + 6 4) And 1 iex ( 1 ) > IO.puts \"7 + 6\" 5) For some fun try running this - 1 iex ( 1 ) > IO.puts \"Hello \" <> \"World\" Don't skip the exercises if you really want to learn Elixir! However simple they may seem, its important to try them out yourself!","title":"Exercises"},{"location":"tutorials/basics/hello_elixir/#please-consider-a-donation","text":"If you would like to see articles coming up much faster then please consider a small donation. All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"Please Consider a Donation \u2764\ufe0f"},{"location":"tutorials/basics/iex/","text":"Interactive Elixir Shell \u00b6 Learn how to interact with the interactive shell and get started. IEx \u00b6 To enter the interactive shell open your terminal and type the following For mac, freeBSD or linux - 1 2 $ iex iex ( 1 ) > For windows - 1 2 c: \\> iex.bat iex ( 1 ) > Interactive shell provides a convenience method for using elixir. Let's try to explore it. 1 iex ( 1 ) > IO.puts ( \"Hello, World\" ) You get back a response - 1 2 Hello, World :ok Don't worry about :ok , its called as an atom and we will come back to it later. To exit the IEx press ctrl-c twice. Helper Functions \u00b6 IEx provides all sorts of helper function, we will see them as required in future tutorials, for now again open the IEx and type the following - 1 iex ( 1 ) >i 43 What output do you see? 1 2 3 4 5 6 7 8 Term 43 Data type Integer Reference modules Integer Implemented protocols IEx.Info, Inspect, List.Chars, String.Chars Using the flag i the interactive shell provided you with a lot of data, lets try putting something else this time. 1 iex ( 2 ) > i \"Hello, World\" Output 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 Term \"Hello, World\" Data type BitString Byte size 12 Description This is a string: a UTF-8 encoded binary. It ' s printed surrounded by \"double quotes\" because all UTF-8 encoded code points in it are printable. Raw representation <<72, 101, 108, 108, 111, 44, 32, 87 , 111 , 114 , 108 , 100 >> Reference modules String, :binary Implemented protocols Collectable, IEx.Info, Inspect, List.Chars, String.Chars Notice the Data type is showing BitString this time, earlier for 43 the data type was Integer , IEx is trying to help by providing all the information that it available. Exercises \u00b6 Now, its time for some fun exercises, type the following and see what output do you get 1 2 3 4 iex ( 1 ) > i 'a' iex ( 2 ) > i 2 .56 iex ( 3 ) > i :hello iex ( 4 ) > i true Just read all the outputs, you are not required to understand everything just yet, but try to read and make sense of the output. Don't skip the exercises if you really want to learn Elixir! However simple they may seem, its important to try them out yourself! Please Consider a Donation \u2764\ufe0f \u00b6 If you would like to see articles coming up much faster then please consider a small donation. All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"IEx"},{"location":"tutorials/basics/iex/#interactive-elixir-shell","text":"Learn how to interact with the interactive shell and get started.","title":"Interactive Elixir Shell"},{"location":"tutorials/basics/iex/#iex","text":"To enter the interactive shell open your terminal and type the following For mac, freeBSD or linux - 1 2 $ iex iex ( 1 ) > For windows - 1 2 c: \\> iex.bat iex ( 1 ) > Interactive shell provides a convenience method for using elixir. Let's try to explore it. 1 iex ( 1 ) > IO.puts ( \"Hello, World\" ) You get back a response - 1 2 Hello, World :ok Don't worry about :ok , its called as an atom and we will come back to it later. To exit the IEx press ctrl-c twice.","title":"IEx"},{"location":"tutorials/basics/iex/#helper-functions","text":"IEx provides all sorts of helper function, we will see them as required in future tutorials, for now again open the IEx and type the following - 1 iex ( 1 ) >i 43 What output do you see? 1 2 3 4 5 6 7 8 Term 43 Data type Integer Reference modules Integer Implemented protocols IEx.Info, Inspect, List.Chars, String.Chars Using the flag i the interactive shell provided you with a lot of data, lets try putting something else this time. 1 iex ( 2 ) > i \"Hello, World\" Output 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 Term \"Hello, World\" Data type BitString Byte size 12 Description This is a string: a UTF-8 encoded binary. It ' s printed surrounded by \"double quotes\" because all UTF-8 encoded code points in it are printable. Raw representation <<72, 101, 108, 108, 111, 44, 32, 87 , 111 , 114 , 108 , 100 >> Reference modules String, :binary Implemented protocols Collectable, IEx.Info, Inspect, List.Chars, String.Chars Notice the Data type is showing BitString this time, earlier for 43 the data type was Integer , IEx is trying to help by providing all the information that it available.","title":"Helper Functions"},{"location":"tutorials/basics/iex/#exercises","text":"Now, its time for some fun exercises, type the following and see what output do you get 1 2 3 4 iex ( 1 ) > i 'a' iex ( 2 ) > i 2 .56 iex ( 3 ) > i :hello iex ( 4 ) > i true Just read all the outputs, you are not required to understand everything just yet, but try to read and make sense of the output. Don't skip the exercises if you really want to learn Elixir! However simple they may seem, its important to try them out yourself!","title":"Exercises"},{"location":"tutorials/basics/iex/#please-consider-a-donation","text":"If you would like to see articles coming up much faster then please consider a small donation. All the work is provided free of cost and completely open source, but it needs your support and love to keep the activity sustainable. Any support is genuinely appreciated, you can help by sending a small donation by clicking the below link:","title":"Please Consider a Donation \u2764\ufe0f"},{"location":"tutorials/basics/installation/","text":"Installation \u00b6 Learn how to install Elixir and how to setup your machine for development. At the time of writing, the latest stable version is Elixir 1.11.0, you may have a different version depending when you are reading this tutorial. Mac OS \u00b6 Installing Elixir couldn't be any easy, just make sure you have Brew installed and then type the following in the terminal - 1 brew install elixir Windows \u00b6 On windows you can install Elixir as you would install just about any program, all you need to do is to download the installer and press next till it is installed. Other Platforms \u00b6 Elixir offers excellent support for all other platforms including FreeBSD and other unix derived languages, check out this page for documentation. Checking Installation \u00b6 You can check the installation, by typing the following in your terminal or powershell - 1 elixir -v Output - 1 2 3 Erlang/OTP 23 [ erts-11.1.1 ] [ source ] [ 64 -bit ] [ smp:4:4 ] [ ds:4:4:10 ] [ async-threads:1 ] [ hipe ] [ dtrace ] Elixir 1 .11.0 ( compiled with Erlang/OTP 23 ) Line 3 indicates that Elixir 1.11.0 has been installed and Elixir has been compiled with Erlang 23.0 Setting up your editor \u00b6 Elixir is supported in all the leading editors and IDE's, incase you are using Visual Studio Code , you only need to install this plugin.","title":"Installation"},{"location":"tutorials/basics/installation/#installation","text":"Learn how to install Elixir and how to setup your machine for development. At the time of writing, the latest stable version is Elixir 1.11.0, you may have a different version depending when you are reading this tutorial.","title":"Installation"},{"location":"tutorials/basics/installation/#mac-os","text":"Installing Elixir couldn't be any easy, just make sure you have Brew installed and then type the following in the terminal - 1 brew install elixir","title":"Mac OS"},{"location":"tutorials/basics/installation/#windows","text":"On windows you can install Elixir as you would install just about any program, all you need to do is to download the installer and press next till it is installed.","title":"Windows"},{"location":"tutorials/basics/installation/#other-platforms","text":"Elixir offers excellent support for all other platforms including FreeBSD and other unix derived languages, check out this page for documentation.","title":"Other Platforms"},{"location":"tutorials/basics/installation/#checking-installation","text":"You can check the installation, by typing the following in your terminal or powershell - 1 elixir -v Output - 1 2 3 Erlang/OTP 23 [ erts-11.1.1 ] [ source ] [ 64 -bit ] [ smp:4:4 ] [ ds:4:4:10 ] [ async-threads:1 ] [ hipe ] [ dtrace ] Elixir 1 .11.0 ( compiled with Erlang/OTP 23 ) Line 3 indicates that Elixir 1.11.0 has been installed and Elixir has been compiled with Erlang 23.0","title":"Checking Installation"},{"location":"tutorials/basics/installation/#setting-up-your-editor","text":"Elixir is supported in all the leading editors and IDE's, incase you are using Visual Studio Code , you only need to install this plugin.","title":"Setting up your editor"},{"location":"tutorials/basics/lists/","text":"TODO \u00b6","title":"List"},{"location":"tutorials/basics/lists/#todo","text":"","title":"TODO"},{"location":"tutorials/basics/map/","text":"","title":"Map"},{"location":"tutorials/basics/mix/","text":"","title":"Mix"},{"location":"tutorials/basics/modules-functions/","text":"","title":"Modules and Functions"},{"location":"tutorials/basics/pattern-matching/","text":"TODO \u00b6","title":"Pattern Matching"},{"location":"tutorials/basics/pattern-matching/#todo","text":"","title":"TODO"},{"location":"tutorials/basics/pipe/","text":"","title":"Pipe Operator"},{"location":"tutorials/basics/processes/","text":"","title":"Processes"},{"location":"tutorials/basics/sigil/","text":"","title":"Sigils"},{"location":"tutorials/basics/stream/","text":"","title":"Streams"},{"location":"tutorials/basics/strings/","text":"TODO \u00b6","title":"Strings"},{"location":"tutorials/basics/strings/#todo","text":"","title":"TODO"},{"location":"tutorials/basics/struct/","text":"","title":"Struct"},{"location":"tutorials/basics/testing/","text":"","title":"Testing"},{"location":"tutorials/ecto/introduction/","text":"","title":"Introduction"},{"location":"tutorials/otp/agent/","text":"","title":"Agent"},{"location":"tutorials/otp/application/","text":"","title":"Application"},{"location":"tutorials/otp/ets/","text":"","title":"ETS"},{"location":"tutorials/otp/genserver/","text":"","title":"GenServer"},{"location":"tutorials/otp/mnesia/","text":"","title":"Mnesia"},{"location":"tutorials/otp/release/","text":"","title":"Release"},{"location":"tutorials/otp/spawn/","text":"","title":"Spawn"},{"location":"tutorials/otp/supervisor/","text":"","title":"Supervisor"},{"location":"tutorials/otp/task/","text":"","title":"Task"},{"location":"tutorials/otp/umbrella/","text":"","title":"Umbrella"},{"location":"tutorials/phoenix/introduction/","text":"","title":"Introduction"}]}